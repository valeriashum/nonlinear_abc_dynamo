#	This file is part of the Snoopy code.
#
#    Snoopy code is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    Snoopy code is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with the Snoopy code.  If not, see <http://www.gnu.org/licenses/>.

# Example of a Snoopy configuration file

configname = "Test (benchmark) configuration file";

// Only the variable which are different from default are set.

physics:									// Physics parameters
{
	
	reynolds = 1000.0;							// Reynolds number (actully the inverse of the viscosity)
	reynolds_magnetic = 1000.0;				// Magnetic Reynolds number (actully the inverse of the resistivity).  Used only when MHD is on
	reynolds_thermic = 1000.0;					// Thermal Reynolds number (actully the inverse of the thermal diffusivity).  Used only when Boussinesq is on
	
	brunt_vaissala_squared = -1.0;			// Brunt Vaissala frequency squared. Used only when Boussinesq is on
	
	omega = 0.6666666666666666666;			// Vertical rotation rate (if Shear=1, Keplerian if found for 2.0/3.0). Used only when WITH_ROTATION is on
	
	shear = 1.0;							// Shear rate. Used only when WITH_SHEAR is on.
};

//-------------------------------------------------------------------------------------------------------------------------

code:										// code parameters
{		
	force_symmetries = true;				// Uncomment to enforce spectral symmetries and mean flow to zero. Useful when N^2 or kappa^2 < 0. (see enforce_symm() )	
};

//-------------------------------------------------------------------------------------------------------------------------

output:										// output parameters
{
	dump_step = 100.0;						// Time between two restart dump outputs (restart dump are erased)

	timevar_vars = ( "t","ev","em","vxmax","vxmin","vymax","vymin","vzmax","vzmin","vxvy", 
								   "bxmax","bxmin","bymax","bymin","bzmax","bzmin","bxby",
								   "thmax","thmin","w2","j2","hm" );
};

//-------------------------------------------------------------------------------------------------------------------------

init:										// Initial conditions parameters
{
	mean_field:								// Force the mean magnetic field to a given value.
	{
		enable = true;						// Set this to true to enable mean field
		bx0 = 0.0;							// Mean magnetic field in the x direction
		by0 = 0.0;							// Mean magnetic field in the y direction
		bz0 = 0.01;							// Mean magnetic field in the z direction
	};
	
	bench = true;							// set this to true to init a benchmark initial condition.
};
		
