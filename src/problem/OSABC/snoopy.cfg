#	This file is part of the Snoopy code.
#
#    Snoopy code is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    Snoopy code is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with the Snoopy code.  If not, see <http://www.gnu.org/licenses/>.

# Example of a Snoopy configuration file

configname = "Oscillatory shearing ABC flow. Forcing to maintain shear and the ABC forcing are present. Initialised to ABC flow plus large scale noise.";

physics:									// Physics parameters
{
	boxsize = (1.0, 1.0, 1.0);				// Box length in X, Y and Z
	
	reynolds = 1000.0;							// Reynolds number (actully the inverse of the viscosity)
	reynolds_thermic = 100.0;					// Thermal Reynolds number (actully the inverse of the thermal diffusivity).  Used only when Boussinesq is on
	
	brunt_vaissala_squared = -1.0;			// Brunt Vaissala frequency squared. Used only when Boussinesq is on

	oscillatory_shear_amp = 0.000000;

	oscillatory_shear_freq = 40.0000;
};

//-------------------------------------------------------------------------------------------------------------------------

code:										// code parameters
{
	cfl = 1.5;								// CFL safety factor. Should be smaller than sqrt(3) for RK3 to be stable.
	safety_source = 0.2;					// Safety factor for SHEAR, Coriolis and Boussinesq terms (should be ~0.2 for accuracy)
	steps_per_shear = 20.0;					// When oscillatory shear is enabled use this many timesteps per shear period
	
	t_initial = 0.0;						// Initial time of the simulation
	t_final = 500.0;							// Simulation will stop if it reaches this time
	max_t_elapsed = 1e30;					// Maximum elapsed time (in hours). Will stop after this elapsed time if t_final is not reached.
	
	interface_check = 5;					// Number of loops between two checks for a user input. On slow filesystems, increase this number 
	interface_output_file = false;			// Set to true to force interface outputs to a file instead of displaying them */
	
	force_symmetries = true;				// Uncomment to enforce spectral symmetries and mean flow to zero. Useful when N^2 or kappa^2 < 0. (see enforce_symm() )
	symmetries_step = 20;					// Number of loops between which the symmetries are enforced. Should be around ~20 for Boussinesq convection.
	
	antialiasing = true;					// 2/3 Antialisaing rule. Could be removed if you assume is unimportant (untested feature).
	
	restart = false;						// set to true to restart from a dump file. If no dump file is found, this option has no effect.
};

//-------------------------------------------------------------------------------------------------------------------------

output:										// output parameters
{
	timevar_step = 0.1;						// Time between two outputs in the timevar file
	snapshot_step = 5.0;					// Time between two snapshot outputs
	dump_step = 100.0;						// Time between two restart dump outputs (restart dump are erased)
	
	timevar_vars = ( "t","ev","vxmax","vxmin","vymax","vymin","vzmax","vzmin", 
								   "w2", "Rxy", "intSRxy", "intCRxy", "disp_rate", "ABCmag", "OL2012A", "OL2012B",
								   "RottaEtaSquared", "RottaXiCubed");
	
	timeseries1x = 0.4;
	timeseries1y = 0.8;
	timeseries1z = 0.6;
	timeseries2x = 0.7;
	timeseries2y = 0.9;
	timeseries2z = 0.1;
	timeseries_step = 0.1;
};

//-------------------------------------------------------------------------------------------------------------------------

init:										// Initial conditions parameters
{
	ABC_flow:							// Init an ABC flow
	{
		enable = true;						// set this to true to enable an ABC flow
		A = 1.0;						// A amplitude
		B = 1.0;						// B amplitude
		C = 1.0;						// C amplitude
		kx = 1;							// Number of wavelength to fit into the box in the x-direction
		ky = 1;							// Number of wavelength to fit into the box in the y-direction
		kz = 1;							// Number of wavelength to fit into the box in the z-direction
	};

	large_scale_noise:						// Add large scale noise to the initial flow
	{
		enable = true;						// set this to true to add the noise
		amplitude = 0.1;					// amplitude of white noise
		cut_length = 0.2;					// cutoff length-scale
	};
};
		
