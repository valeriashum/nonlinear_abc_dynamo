#	This file is part of the Snoopy code.
#
#    Snoopy code is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    Snoopy code is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with the Snoopy code.  If not, see <http://www.gnu.org/licenses/>.

# Example of a Snoopy configuration file

configname = "Kinematic Dynamo in the ABC flow with initial random noise field";

physics:									// Physics parameters
{#201.06192     - 32 * 2pi   
 #125.663706144 - 20 * 2pi
 #100.530964915 - 16 * 2pi
 #50.2654824574 - 8  * 2pi
 #31.4159265359 - 5  * 2pi
 #25.1327412287 - 4  * 2pi
 #12.5663706144 - 2  * 2pi
 #6.28318530718 - 1  * 2pi

	boxsize = (201.06192,12.5663706144,6.28318530718);	// Box length in X, Y and Z
	reynolds_magnetic = .01118033988749894848;			    // Magnetic Reynolds number
    //etta=0.0;
	reynolds = 1.0;						// Reynolds number (actully the inverse of the viscosity)
	reynolds_thermic = 100.0;				// Thermal Reynolds number (actully the inverse of the thermal diffusivity).  Used only when Boussinesq is on
	
	brunt_vaissala_squared = -1.0;				// Brunt Vaissala frequency squared. Used only when Boussinesq is on
};

//-------------------------------------------------------------------------------------------------------------------------

code:										// code parameters
{
	cfl = 0.1;						// CFL safety factor. Should be smaller than sqrt(3) for RK3 to be stable.
	cfl_diss = 0.1;                         		// CFL safety factor. Should be smaller than cfl factor above.
    safety_source = 0.2;					// Safety factor for SHEAR, Coriolis and Boussinesq terms (should be ~0.2 for accuracy)
	
	t_initial = 0.0;					// Initial time of the simulation
	t_final =  100.0;					// Simulation will stop if it reaches this time
	max_t_elapsed = 1e30;					// Maximum elapsed time (in hours). Will stop after this elapsed time if t_final is not reached.
	
	interface_check = 5;					// Number of loops between two checks for a user input. On slow filesystems, increase this number 
	interface_output_file = false;				// Set to true to force interface outputs to a file instead of displaying them */
	
	force_symmetries = false;				// Uncomment to enforce spectral symmetries and mean flow to zero. Useful when N^2 or kappa^2 < 0. (see enforce_symm() )
	symmetries_step = 20;					// Number of loops between which the symmetries are enforced. Should be around ~20 for Boussinesq convection.
	
	antialiasing = true;					// 2/3 Antialisaing rule. Could be removed if you assume is unimportant (untested feature).
	
	restart = false;					// set to true to restart from a dump file. If no dump file is found, this option has no effect.
};

//-------------------------------------------------------------------------------------------------------------------------

output:										// output parameters
{
	timevar_step = 0.05;					// Time between two outputs in the timevar file
	snapshot_step = 0.5;					// Time between two snapshot outputs
	dump_step = 2.0;					// Time between two restart dump outputs (restart dump are erased)
   	magnetic_field = true;                   		// Time between two snapshots of <B>
    
	timevar_vars = ("t","em","Rm",  "em_gr" );

	//timevar_vars = ( "t","ev","em","bxmax","bxmin","bymax","bymin","bzmax","bzmin", "Bx_kxdom", "Bx_kydom", "Bx_kzdom","By_kxdom", "By_kydom", "By_kzdom","Bz_kxdom", "Bz_kydom", "Bz_kzdom","k_par", "k_BxJ","k_alfvenic""gr_100","gr_110","gr_111","gr_k00","gr_kk0","gr_kkk" );
	// "em_gr" should be last in the list if the saturation exit is on in the output_timevar.c
};

//-------------------------------------------------------------------------------------------------------------------------

init:									// Initial conditions parameters from initflow.c
{
   	No_Noise:
   	{ 	
        enable = true;
    };

	white_noise:							// Add random noise to the initial flow
	{
        // only B
        enable = true;						// set this to true to add the noise
		amplitude= 1.0e-5;					    // amplitude of white noise
    };

    large_scale_noise:               // Init a large scale random noise down to cut_length
	{
         // both B and u  
		enable = false;	             // set this to true to enable large scale noise
		amplitude = 0.0;             // noise amplitude
		cut_length = 0.0;            // Wavelength over which the noise is applied
	};
	
	mean_field: 
	{ 
        // only B
        enable = true;
		bx0 = 0.;
		by0 = 0.;
		bz0 = 0.;
	};


	modified_ABC_flow:							// Init an ABC flow
	{
         // only u
		enable = false;						// set this to true to enable an ABC flow
		A = 1.0;							// A amplitude
		B = 1.0;							// B amplitude
		C = 1.0;							// C amplitude
        D = 1.0;							// A amplitude
		kx = 10;					// Number of wavelength to fit into the box in the x-direction
		ky = 1;						// Number of wavelength to fit into the box in the y-direction
		kz = 1;						// Number of wavelength to fit into the box in the z-direction 
        m = 10; 

	};
	ABC_flow:							// Init an ABC flow
	{
         // only u
		enable = true;						// set this to true to enable an ABC flow
		A = 1.0;							// A amplitude
		B = 1.0;							// B amplitude
		C = 1.0;							// C amplitude
        	kx = 10;					// Number of wavelength to fit into the box in the x-direction
		ky = 1;						// Number of wavelength to fit into the box in the y-direction
		kz = 1;						// Number of wavelength to fit into the box in the z-direction    

	};

    dominant_scale: 
	{
        // only B 
        enable = false;              // set this to true to add the noise
        amplitude= 1.0e-4;   		// amplitude of white noise
 	};

};


